/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

package ksonnet

import (
	"fmt"
	"github.com/cenkalti/backoff"
	"github.com/ghodss/yaml"
	gogetter "github.com/hashicorp/go-getter"
	"github.com/ksonnet/ksonnet/pkg/actions"
	"github.com/ksonnet/ksonnet/pkg/app"
	"github.com/ksonnet/ksonnet/pkg/client"
	"github.com/ksonnet/ksonnet/pkg/component"
	configtypes "github.com/kubeflow/kubeflow/bootstrap/config"
	kftypes "github.com/kubeflow/kubeflow/bootstrap/pkg/apis/apps"
	kstypes "github.com/kubeflow/kubeflow/bootstrap/pkg/apis/apps/ksonnet/v1alpha1"
	kfctlutils "github.com/kubeflow/kubeflow/bootstrap/pkg/utils"
	log "github.com/sirupsen/logrus"
	"github.com/spf13/afero"
	"golang.org/x/net/context"
	"io/ioutil"
	"k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/client-go/tools/clientcmd"
	clientcmdapi "k8s.io/client-go/tools/clientcmd/api"
	"os"
	"path"
	"path/filepath"
	"regexp"
	"strings"
	"time"
)

// Ksonnet implements the KfApp Interface
type ksApp struct {
	// ksonnet root name
	KsName string
	// ksonnet env name
	KsEnvName string
	KApp      app.App
	// kstypes.Ksonnet is autogenerated similar to k8 types
	// It has a Spec member of type KsonnetSpec that holds common fields like platform, version, repo
	// components, packages, parameters. This information is used to generate a ksonnet app.
	// It is not persisted into kfctl's app.yaml.
	KsApp *kstypes.Ksonnet
}

func GetKfApp(options map[string]interface{}) kftypes.KfApp {
	_kfapp := &ksApp{
		KsName:    kstypes.KsName,
		KsEnvName: kstypes.KsEnvName,
		KsApp: &kstypes.Ksonnet{
			TypeMeta: metav1.TypeMeta{
				Kind:       "Ksonnet",
				APIVersion: "ksonnet.apps.kubeflow.org/v1alpha1",
			},
		},
	}
	_kfapp.KsApp.Spec.Platform = options[string(kftypes.PLATFORM)].(string)
	if options[string(kftypes.APPNAME)] != nil {
		_kfapp.KsApp.Name = options[string(kftypes.APPNAME)].(string)
	}
	if options[string(kftypes.APPDIR)] != nil {
		_kfapp.KsApp.Spec.AppDir = options[string(kftypes.APPDIR)].(string)
		ksDir := path.Join(_kfapp.KsApp.Spec.AppDir, kstypes.KsName)
		if _, err := os.Stat(ksDir); !os.IsNotExist(err) {
			fs := afero.NewOsFs()
			kApp, kAppErr := app.Load(fs, nil, ksDir)
			if kAppErr != nil {
				log.Fatalf("there was a problem loading ksonnet app from %v. Error: %v", ksDir, kAppErr)
			}
			_kfapp.KApp = kApp
		}
	}
	if options[string(kftypes.NAMESPACE)] != nil {
		namespace := options[string(kftypes.NAMESPACE)].(string)
		_kfapp.KsApp.Namespace = namespace
	}
	if options[string(kftypes.REPO)] != nil {
		kubeflowRepo := options[string(kftypes.REPO)].(string)
		re := regexp.MustCompile(`(^\$GOPATH)(.*$)`)
		goPathVar := os.Getenv("GOPATH")
		if goPathVar != "" {
			kubeflowRepo = re.ReplaceAllString(kubeflowRepo, goPathVar+`$2`)
		}
		_kfapp.KsApp.Spec.Repo = path.Join(kubeflowRepo, "kubeflow")
	}
	if options[string(kftypes.VERSION)] != nil {
		kubeflowVersion := options[string(kftypes.VERSION)].(string)
		_kfapp.KsApp.Spec.Version = kubeflowVersion
	}
	if options[string(kftypes.DATA)] != nil {
		dat := options[string(kftypes.DATA)].([]byte)
		specErr := yaml.Unmarshal(dat, _kfapp.KsApp)
		if specErr != nil {
			log.Errorf("couldn't unmarshal Ksonnet. Error: %v", specErr)
		}
	}
	return _kfapp
}

func (ksApp *KsApp) writeConfigFile() error {
	buf, bufErr := yaml.Marshal(ksApp.KsApp)
	if bufErr != nil {
		return bufErr
	}
	cfgFilePath := filepath.Join(ksApp.KsApp.Spec.AppDir, kftypes.KfConfigFile)
	cfgFilePathErr := ioutil.WriteFile(cfgFilePath, buf, 0644)
	if cfgFilePathErr != nil {
		return cfgFilePathErr
	}
	return nil
}

func (ksApp *KsApp) Apply(resources kftypes.ResourceEnum, options map[string]interface{}) error {
	log.Infof("ks.Apply: project = %v, zone = %v name = %v", options[string(kftypes.PROJECT)],
		options[string(kftypes.ZONE)], ksApp.KsApp.Name)
	if options[string(kftypes.PROJECT)] == nil || options[string(kftypes.PROJECT)].(string) == "" {
		return fmt.Errorf("Couldn't find %v in KSONNET options ...", string(kftypes.PROJECT))
	}
	if options[string(kftypes.ZONE)] == nil || options[string(kftypes.ZONE)].(string) == "" {
		return fmt.Errorf("Couldn't find %v in KSONNET options ...", string(kftypes.ZONE))
	}
	project := options[string(kftypes.PROJECT)].(string)
	zone := options[string(kftypes.ZONE)].(string)
	name := ksApp.KsApp.Name
	ctx := context.Background()
	cluster, err := kftypes.GetClusterInfo(ctx, project, zone, name)
	if err != nil {
		return err
	}
	config, err := kftypes.BuildConfigFromClusterInfo(ctx, cluster)
	if err != nil {
		return err
	}
	host, _, err := kftypes.ServerVersionWithConfig(config)
	if err != nil {
		return fmt.Errorf("couldn't get server version: %v", err)
	}
	log.Infof("ServerVersion: %v", host)
	cli, cliErr := kftypes.GetClientOutOfClusterWithConfig(config)
	if cliErr != nil {
		return fmt.Errorf("couldn't create client Error: %v", cliErr)
	}
	// TODO(gabrielwen): Make env name an option.
	envSetErr := ksApp.envSet(kstypes.KsEnvName, host)
	if envSetErr != nil {
		return fmt.Errorf("couldn't create ksonnet env %v Error: %v", kstypes.KsEnvName, envSetErr)
	}
	//ks param set application name ${DEPLOYMENT_NAME}
	paramSetErr := ksApp.paramSet("application", "name", name)
	if paramSetErr != nil {
		return fmt.Errorf("couldn't set application component's name to %v Error: %v", name, paramSetErr)
	}
	namespace := ksApp.KsApp.ObjectMeta.Namespace
	log.Infof(string(kftypes.NAMESPACE)+": %v", namespace)
	_, nsMissingErr := cli.CoreV1().Namespaces().Get(namespace, metav1.GetOptions{})
	if nsMissingErr != nil {
		log.Infof("Creating namespace: %v", namespace)
		nsSpec := &v1.Namespace{ObjectMeta: metav1.ObjectMeta{Name: namespace}}
		_, nsErr := cli.CoreV1().Namespaces().Create(nsSpec)
		if nsErr != nil {
			return fmt.Errorf("couldn't create "+string(kftypes.NAMESPACE)+" %v Error: %v", namespace, nsErr)
		}
	}
	cwd, err := os.Getwd()
	if err != nil {
		return fmt.Errorf("could not get current directory %v", err)
	}
	if cwd != ksApp.KsApp.Spec.AppDir {
		err = os.Chdir(ksApp.KsApp.Spec.AppDir)
		if err != nil {
			return fmt.Errorf("could not change directory to %v Error %v", ksApp.KsApp.Spec.AppDir, err)
		}
	}
	// TODO(#2391): Fix this and use ks.apply
	if err = ksApp.showComponent([]string{"metacontroller", "application"}); err != nil {
		return fmt.Errorf("Writing config file error: %v", err)
	}

	return kfctlutils.RunKubectlApply(ksApp.getCompsFilePath())
}

func (ksApp *KsApp) getCompsFilePath() string {
	return filepath.Join(ksApp.KsApp.Spec.AppDir, kstypes.KsName, kstypes.KsEnvName+".yaml")
}

func (ksApp *KsApp) showComponent(components []string) error {
	showOptions := map[string]interface{}{
		actions.OptionApp:            ksApp.KApp,
		actions.OptionComponentNames: components,
		actions.OptionEnvName:        kstypes.KsEnvName,
		actions.OptionFormat:         "yaml",
	}

	configPath := ksApp.getCompsFilePath()
	log.Infof("Writing deploying config to %v", configPath)
	configFile, err := os.Create(configPath)
	if err != nil {
		return err
	}

	stdout := os.Stdout
	os.Stdout = configFile

	err = actions.RunShow(showOptions)
	if err != nil {
		os.Stdout = stdout
		return err
	}

	os.Stdout = stdout
	return nil
}

func (ksApp *ksApp) applyComponent(components []string, cfg *clientcmdapi.Config) error {
	applyOptions := map[string]interface{}{
		actions.OptionApp: ksApp.KApp,
		actions.OptionClientConfig: &client.Config{
			Overrides: &clientcmd.ConfigOverrides{},
			Config:    clientcmd.NewDefaultClientConfig(*cfg, &clientcmd.ConfigOverrides{}),
		},
		actions.OptionComponentNames: components,
		actions.OptionCreate:         true,
		actions.OptionDryRun:         false,
		actions.OptionEnvName:        kstypes.KsEnvName,
		actions.OptionGcTag:          "gc-tag",
		actions.OptionSkipGc:         true,
	}
	bo := backoff.WithMaxRetries(backoff.NewConstantBackOff(5*time.Second), 6)
	doneApply := make(map[string]bool)
	err := backoff.Retry(func() error {
		for _, comp := range components {
			if _, ok := doneApply[comp]; ok {
				continue
			}
			applyOptions[actions.OptionComponentNames] = []string{comp}
			err := actions.RunApply(applyOptions)
			if err == nil {
				log.Infof("Component %v apply succeeded", comp)
				doneApply[comp] = true
			} else {
				log.Errorf("(Will retry) Component %v apply failed; Error: %v", comp, err)
			}
		}
		if len(doneApply) == len(components) {
			return nil
		}
		return fmt.Errorf("%v failed components in last try", len(components)-len(doneApply))
	}, bo)
	if err != nil {
		log.Errorf("components apply failed; Error: %v", err)
	} else {
		log.Infof("All components apply succeeded")
	}
	return err

}

func (ksApp *ksApp) componentAdd(component kstypes.KsComponent, args []string) error {
	componentPath := filepath.Join(ksApp.ksRoot(), "components", component.Name+".jsonnet")
	componentArgs := make([]string, 0)
	componentArgs = append(componentArgs, component.Prototype)
	componentArgs = append(componentArgs, component.Name)
	if args != nil && len(args) > 0 {
		componentArgs = append(componentArgs, args[0:]...)
	}
	if exists, _ := afero.Exists(afero.NewOsFs(), componentPath); !exists {
		log.Infof("Creating Component: %v ...", component.Name)
		log.Infof("Args: %v", componentArgs)
		err := actions.RunPrototypeUse(map[string]interface{}{
			actions.OptionAppRoot:   ksApp.ksRoot(),
			actions.OptionArguments: componentArgs,
		})
		if err != nil {
			return fmt.Errorf("there was a problem adding component %v: %v", component.Name, err)
		}
	} else {
		log.Infof("Component %v already exists", component.Name)
	}
	return nil
}

func (ksApp *ksApp) components() (map[string]*kstypes.KsComponent, error) {
	moduleName := "/"
	topModule := component.NewModule(ksApp.KApp, moduleName)
	components, err := topModule.Components()
	if err != nil {
		return nil, fmt.Errorf("there was a problem getting the components %v. Error: %v", ksApp.KsApp.Name, err)
	}
	comps := make(map[string]*kstypes.KsComponent)
	for _, comp := range components {
		name := comp.Name(false)
		comps[name] = &kstypes.KsComponent{
			Name:      name,
			Prototype: name,
		}
	}
	return comps, nil
}

func (ksApp *ksApp) deleteGlobalResources() error {
	crdClient, clientErr := kftypes.GetApiExtensionsClientOutOfCluster()
	if clientErr != nil {
		return fmt.Errorf("couldn't get  client Error: %v", clientErr)
	}
	do := &metav1.DeleteOptions{}
	lo := metav1.ListOptions{
		LabelSelector: kftypes.DefaultAppLabel + "=" + ksApp.KsApp.Name,
	}
	crdsErr := crdClient.CustomResourceDefinitions().DeleteCollection(do, lo)
	if crdsErr != nil {
		return fmt.Errorf("couldn't delete customresourcedefinitions Error: %v", crdsErr)
	}
	crdsByName := []string{
		"compositecontrollers.metacontroller.k8s.io",
		"controllerrevisions.metacontroller.k8s.io",
		"decoratorcontrollers.metacontroller.k8s.io",
		"applications.app.k8s.io",
	}
	for _, crd := range crdsByName {
		do := &metav1.DeleteOptions{}
		dErr := crdClient.CustomResourceDefinitions().Delete(crd, do)
		if dErr != nil {
			log.Errorf("could not delete %v Error %v", crd, dErr)
		}
	}
	cli, cliErr := kftypes.GetClientOutOfCluster()
	if cliErr != nil {
		return fmt.Errorf("couldn't create client Error: %v", cliErr)
	}
	crbsErr := cli.RbacV1().ClusterRoleBindings().DeleteCollection(do, lo)
	if crbsErr != nil {
		return fmt.Errorf("couldn't get list of clusterrolebindings Error: %v", crbsErr)
	}
	crbName := "meta-controller-cluster-role-binding"
	dErr := cli.RbacV1().ClusterRoleBindings().Delete(crbName, do)
	if dErr != nil {
		log.Errorf("could not delete %v Error %v", crbName, dErr)
	}
	crsErr := cli.RbacV1().ClusterRoles().DeleteCollection(do, lo)
	if crsErr != nil {
		return fmt.Errorf("couldn't delete clusterroles Error: %v", crsErr)
	}
	return nil
}

func (ksApp *ksApp) Delete(resources kftypes.ResourceEnum, options map[string]interface{}) error {
	err := ksApp.deleteGlobalResources()
	if err != nil {
		log.Errorf("there was a problem deleting global resources: %v", err)
	}
	host, _, serverErr := kftypes.ServerVersion()
	if serverErr != nil {
		return fmt.Errorf("couldn't get server version: %v", serverErr)
	}
	cli, cliErr := kftypes.GetClientOutOfCluster()
	if cliErr != nil {
		return fmt.Errorf("couldn't create client Error: %v", cliErr)
	}
	envSetErr := ksApp.envSet(kstypes.KsEnvName, host)
	if envSetErr != nil {
		return fmt.Errorf("couldn't create ksonnet env %v Error: %v", kstypes.KsEnvName, envSetErr)
	}
	clientConfig, clientConfigErr := kftypes.GetClientConfig()
	if clientConfigErr != nil {
		return fmt.Errorf("couldn't load client config Error: %v", clientConfigErr)
	}
	components := []string{"application", "metacontroller"}
	err = actions.RunDelete(map[string]interface{}{
		actions.OptionApp: ksApp.KApp,
		actions.OptionClientConfig: &client.Config{
			Overrides: &clientcmd.ConfigOverrides{},
			Config:    clientcmd.NewDefaultClientConfig(*clientConfig, &clientcmd.ConfigOverrides{}),
		},
		actions.OptionEnvName:        ksApp.KsEnvName,
		actions.OptionComponentNames: components,
		actions.OptionGracePeriod:    int64(10),
	})
	if err != nil {
		log.Infof("there was a problem deleting %v: %v", components, err)
	}
	namespace := ksApp.KsApp.ObjectMeta.Namespace
	log.Infof("deleting namespace: %v", namespace)
	ns, nsMissingErr := cli.CoreV1().Namespaces().Get(namespace, metav1.GetOptions{})
	if nsMissingErr == nil {
		nsErr := cli.CoreV1().Namespaces().Delete(ns.Name, metav1.NewDeleteOptions(int64(100)))
		if nsErr != nil {
			return fmt.Errorf("couldn't delete namespace %v Error: %v", namespace, nsErr)
		}
	}

	name := "meta-controller-cluster-role-binding"
	crb, crbErr := cli.RbacV1().ClusterRoleBindings().Get(name, metav1.GetOptions{})
	if crbErr == nil {
		crbDeleteErr := cli.RbacV1().ClusterRoleBindings().Delete(crb.Name, metav1.NewDeleteOptions(int64(5)))
		if crbDeleteErr != nil {
			return fmt.Errorf("couldn't delete clusterrolebinding %v Error: %v", name, crbDeleteErr)
		}
	}
	return nil
}

func setNameVal(entries []configtypes.NameValue, name string, val string) {
	for i, nv := range entries {
		if nv.Name == name {
			log.Infof("Setting %v to %v", name, val)
			entries[i].Value = val
			return
		}
	}
	log.Infof("Appending %v as %v", name, val)
	entries = append(entries, configtypes.NameValue{
		Name:  name,
		Value: val,
	})
}

func (ksApp *KsApp) Generate(resources kftypes.ResourceEnum, options map[string]interface{}) error {
	log.Infof("Ksonnet.Generate Name %v AppDir %v Platform %v", ksApp.KsApp.Name,
		ksApp.KsApp.Spec.AppDir, ksApp.KsApp.Spec.Platform)

	configPath := options[string(kftypes.DefaultConfig)].(string)
	config := &configtypes.ComponentConfig{}
	if buf, bufErr := ioutil.ReadFile(configPath); bufErr == nil {
		if readErr := yaml.Unmarshal(buf, config); readErr != nil {
			return fmt.Errorf("Unable to parse config: %v", readErr)
		}
	} else {
		return fmt.Errorf("Unable to read config %v: %v", configPath, bufErr)
	}

	config.Repo = ksApp.KsApp.Spec.Repo
	email := options[string(kftypes.EMAIL)].(string)
	setNameVal(config.ComponentParams["cert-manager"], "acmeEmail", email)
	ipName := options[string(kftypes.IPNAME)].(string)
	hostname := options[string(kftypes.HOSTNAME)].(string)
	if val, ok := options[string(kftypes.USE_BASIC_AUTH)]; ok && val.(bool) {
		setNameVal(config.ComponentParams["basic-auth-ingress"], "ipName", ipName)
		setNameVal(config.ComponentParams["basic-auth-ingress"], "hostname", hostname)
	} else {
		setNameVal(config.ComponentParams["iap-ingress"], "ipName", ipName)
		setNameVal(config.ComponentParams["iap-ingress"], "hostname", hostname)
	}
	setNameVal(config.ComponentParams["pipeline"], "mysqlPd", ksApp.KsApp.Name+"-storage-metadata-store")
	setNameVal(config.ComponentParams["pipeline"], "minioPd", ksApp.KsApp.Name+"-storage-artifact-store")
	components := []string{}
	for _, c := range config.Components {
		if c != "application" && c != "metacontroller" {
			components = append(components, fmt.Sprintf("\"%v\"", c))
		}
	}
	setNameVal(config.ComponentParams["application"], "components",
		"["+strings.Join(components, " ,")+"]")

	log.Infof("Configs for generation: %+v", config)

	host, k8sSpec, err := kftypes.ServerVersion()
	if err != nil {
		return fmt.Errorf("couldn't get server version: %v", err)
	}
	initErr := ksApp.initKs("default", k8sSpec, host, ksApp.KsApp.Namespace)
	if initErr != nil {
		return fmt.Errorf("couldn't initialize KfApi: %v", initErr)
	}
	ksRegistry := kstypes.DefaultRegistry
	ksRegistry.Version = ksApp.KsApp.Spec.Version
	ksRegistry.RegUri = ksApp.KsApp.Spec.Repo
	registryAddErr := ksApp.registryAdd(ksRegistry)
	if registryAddErr != nil {
		return fmt.Errorf("couldn't add registry %v. Error: %v", ksRegistry.Name, registryAddErr)
	}
	for _, pkgName := range config.Packages {
		pkg := kstypes.KsPackage{
			Name:     pkgName,
			Registry: "kubeflow",
		}
		packageAddErr := ksApp.pkgInstall(pkg)
		if packageAddErr != nil {
			return fmt.Errorf("couldn't add package %v. Error: %v", pkg.Name, packageAddErr)
		}
	}
	for _, compName := range config.Components {
		comp := kstypes.KsComponent{
			Name:      compName,
			Prototype: compName,
		}
		parameterArgs := []string{}
		if val, ok := config.ComponentParams[compName]; ok {
			for _, nv := range val {
				if nv.InitRequired {
					name := "--" + nv.Name
					parameterArgs = append(parameterArgs, name)
					parameterArgs = append(parameterArgs, nv.Value)
				}
			}
		}
		if componentAddErr := ksApp.componentAdd(comp, parameterArgs); componentAddErr != nil {
			return fmt.Errorf("couldn't add comp %v. Error: %v", comp.Name, componentAddErr)
		}
	}
	for compName, namevals := range config.ComponentParams {
		for _, nv := range namevals {
			args := map[string]interface{}{
				actions.OptionAppRoot: ksApp.ksRoot(),
				actions.OptionName:    compName,
				actions.OptionPath:    nv.Name,
				actions.OptionValue:   nv.Value,
			}
			if err := actions.RunParamSet(args); err != nil {
				return fmt.Errorf("Failed to set param %v %v %v: %v", compName, nv.Name,
					nv.Value, err)
			}
		}
	}

	return nil
}

func (ksApp *ksApp) Init(resources kftypes.ResourceEnum, options map[string]interface{}) error {
	ksApp.KsApp.Spec.Platform = options[string(kftypes.PLATFORM)].(string)
	err := os.Mkdir(ksApp.KsApp.Spec.AppDir, os.ModePerm)
	if err != nil {
		return fmt.Errorf("couldn't create directory %v, most likely it already exists", ksApp.KsApp.Spec.AppDir)
	}
	cfgFilePath := filepath.Join(ksApp.KsApp.Spec.AppDir, kftypes.KfConfigFile)
	_, appDirErr := afero.NewOsFs().Stat(cfgFilePath)
	if appDirErr == nil {
		return fmt.Errorf("config file %v already exists in %v", kftypes.KfConfigFile, ksApp.KsApp.Spec.AppDir)
	}
	newPath := path.Join(ksApp.KsApp.Spec.AppDir, kftypes.DefaultCacheDir, ksApp.KsApp.Spec.Version)
	ksApp.KsApp.Spec.Repo = path.Join(newPath, "kubeflow")
	createConfigErr := ksApp.writeConfigFile()
	if createConfigErr != nil {
		return fmt.Errorf("cannot create config file app.yaml in %v", ksApp.KsApp.Spec.AppDir)
	}
	return nil
}

func (ksApp *ksApp) initKs() error {
	newRoot := path.Join(ksApp.KsApp.Spec.AppDir, ksApp.KsName)
	ksApp.KsEnvName = kstypes.KsEnvName
	host, k8sSpec, err := kftypes.ServerVersion()
	if err != nil {
		return fmt.Errorf("couldn't get server version: %v", err)
	}
	options := map[string]interface{}{
		actions.OptionFs:                    afero.NewOsFs(),
		actions.OptionName:                  ksApp.KsName,
		actions.OptionEnvName:               ksApp.KsEnvName,
		actions.OptionNewRoot:               newRoot,
		actions.OptionServer:                host,
		actions.OptionSpecFlag:              k8sSpec,
		actions.OptionNamespace:             ksApp.KsApp.Namespace,
		actions.OptionSkipDefaultRegistries: true,
	}
	err = actions.RunInit(options)
	if err != nil {
		return fmt.Errorf("there was a problem initializing the app: %v", err)
	}
	log.Infof("Successfully initialized the app %v.", ksApp.KsApp.Name)

	return nil
}

func (ksApp *ksApp) envSet(envName string, host string) error {
	ksApp.KsEnvName = envName
	err := actions.RunEnvSet(map[string]interface{}{
		actions.OptionAppRoot: ksApp.ksRoot(),
		actions.OptionEnvName: ksApp.KsEnvName,
		actions.OptionServer:  host,
	})
	if err != nil {
		return fmt.Errorf("There was a problem setting ksonnet env: %v", err)
	}
	return nil
}

func (ksApp *ksApp) ksRoot() string {
	root := path.Join(ksApp.KsApp.Spec.AppDir, ksApp.KsName)
	return root
}

func (ksApp *ksApp) libraries() (map[string]*kstypes.KsLibrary, error) {
	libs, err := ksApp.KApp.Libraries()
	if err != nil {
		return nil, fmt.Errorf("there was a problem getting the libraries %v. Error: %v", ksApp.KsApp.Name, err)
	}

	libraries := make(map[string]*kstypes.KsLibrary)
	for k, v := range libs {
		libraries[k] = &kstypes.KsLibrary{
			Name:     v.Name,
			Registry: v.Registry,
			Version:  v.Version,
		}
	}
	return libraries, nil
}

func (ksApp *ksApp) registries() (map[string]*kstypes.Registry, error) {
	regs, err := ksApp.KApp.Registries()
	if err != nil {
		return nil, fmt.Errorf("There was a problem getting the registries %v. Error: %v", ksApp.KsApp.Name, err)
	}
	registries := make(map[string]*kstypes.Registry)
	for k, v := range regs {
		registries[k] = &kstypes.Registry{
			Name:     v.Name,
			Protocol: v.Protocol,
			URI:      v.URI,
		}
	}

	return registries, nil
}

func (ksApp *ksApp) paramSet(component string, name string, value string) error {
	err := actions.RunParamSet(map[string]interface{}{
		actions.OptionAppRoot: ksApp.ksRoot(),
		actions.OptionName:    component,
		actions.OptionPath:    name,
		actions.OptionValue:   value,
	})
	if err != nil {
		return fmt.Errorf("Error when setting Parameters %v for Component %v: %v", name, component, err)
	}
	return nil
}

func (ksApp *ksApp) pkgInstall(pkg kstypes.KsPackage) error {
	root := ksApp.ksRoot()
	err := actions.RunPkgInstall(map[string]interface{}{
		actions.OptionAppRoot: root,
		actions.OptionPkgName: pkg.Registry + "/" + pkg.Name,
		actions.OptionName:    pkg.Name,
		actions.OptionForce:   false,
	})
	if err != nil {
		return fmt.Errorf("there was a problem installing package %v: %v", pkg.Name, err)
	}
	return nil
}

func (ksApp *ksApp) prototypeUse(m map[string]interface{}) error {
	return nil
}

func (ksApp *ksApp) registryAdd(registry *kstypes.RegistryConfig) error {
	log.Infof("App %v add registry %v URI %v", ksApp.KsApp.Name, registry.Name, registry.RegUri)
	root := ksApp.ksRoot()
	options := map[string]interface{}{
		actions.OptionAppRoot:  root,
		actions.OptionName:     registry.Name,
		actions.OptionURI:      registry.RegUri,
		actions.OptionPath:     registry.Path,
		actions.OptionVersion:  registry.Version,
		actions.OptionOverride: false,
	}
	err := actions.RunRegistryAdd(options)
	if err != nil {
		return fmt.Errorf("there was a problem adding registry %v: %v", registry.Name, err)
	}
	return nil
}

func (ksApp *ksApp) Show(resources kftypes.ResourceEnum, options map[string]interface{}) error {
	capture := kftypes.Capture()
	err := actions.RunShow(map[string]interface{}{
		actions.OptionApp:            ksApp.KApp,
		actions.OptionComponentNames: []string{},
		actions.OptionEnvName:        kstypes.KsEnvName,
		actions.OptionFormat:         "yaml",
	})
	if err != nil {
		return fmt.Errorf("there was a problem calling show: %v", err)
	}
	yamlDir := filepath.Join(ksApp.KsApp.Spec.AppDir, "yamls")
	err = os.Mkdir(yamlDir, os.ModePerm)
	if err != nil {
		return fmt.Errorf("couldn't create directory %v, most likely it already exists", yamlDir)
	}
	output, outputErr := capture()
	if outputErr != nil {
		return fmt.Errorf("there was a problem calling capture: %v", outputErr)
	}
	yamlFile := filepath.Join(yamlDir, "default.yaml")
	yamlFileErr := ioutil.WriteFile(yamlFile, []byte(output), 0644)
	if yamlFileErr != nil {
		return fmt.Errorf("could not write to %v Error %v", yamlFile, yamlFileErr)
	}
	return nil
}

func (ksApp *ksApp) writeConfigFile() error {
	buf, bufErr := yaml.Marshal(ksApp.KsApp)
	if bufErr != nil {
		return bufErr
	}
	cfgFilePath := filepath.Join(ksApp.KsApp.Spec.AppDir, kftypes.KfConfigFile)
	cfgFilePathErr := ioutil.WriteFile(cfgFilePath, buf, 0644)
	if cfgFilePathErr != nil {
		return cfgFilePathErr
	}
	return nil
}
